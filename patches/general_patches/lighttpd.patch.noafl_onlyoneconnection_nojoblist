diff --git a/src/connections.c b/src/connections.c
index 51afa665..f815265f 100644
--- a/src/connections.c
+++ b/src/connections.c
@@ -188,7 +188,13 @@ static void connection_handle_response_end_state(request_st * const r, connectio
 		r->http_status = 100; /* XXX: what if con->state == CON_STATE_ERROR? */
 		/*if (r->http_status)*/
 			plugins_call_handle_request_done(r);
-		connection_handle_shutdown(con);
+        // AVOIDING CLOSING CONNECTION, STAY ON THAT STATE
+//		connection_handle_shutdown(con);
+        request_reset(r);
+		con->is_readable = 1;
+		r->x.h1.bytes_read_ckpt = r->read_queue.bytes_in;
+		r->x.h1.bytes_written_ckpt = r->write_queue.bytes_out;
+		connection_set_state(r, CON_STATE_REQUEST_START);
 		return;
 	}
 
@@ -220,7 +226,13 @@ static void connection_handle_response_end_state(request_st * const r, connectio
 #endif
 		connection_set_state(r, CON_STATE_REQUEST_START);
 	} else {
-		connection_handle_shutdown(con);
+        // AVOIDING CLOSING CONNECTION, STAY ON THAT STATE
+//		connection_handle_shutdown(con);
+        request_reset(r);
+		con->is_readable = 1;
+		r->x.h1.bytes_read_ckpt = r->read_queue.bytes_in;
+		r->x.h1.bytes_written_ckpt = r->write_queue.bytes_out;
+		connection_set_state(r, CON_STATE_REQUEST_START);
 	}
 }
 
@@ -665,7 +677,7 @@ connection_state_machine_loop (request_st * const r, connection * const con)
 	do {
 		if (r->conf.log_state_handling)
 			connection_log_state(r, "");
-
+            
 		switch ((ostate = r->state)) {
 		case CON_STATE_REQUEST_START: /* transient */
 			/*(should not be reached by HTTP/2 streams)*/
diff --git a/src/h1.c b/src/h1.c
index eabcb414..b8301d5f 100644
--- a/src/h1.c
+++ b/src/h1.c
@@ -375,6 +375,11 @@ h1_recv_headers (request_st * const r, connection * const con)
     uint8_t discard_blank = 0;
     unsigned short hoff[8192]; /* max num header lines + 3; 16k on stack */
 
+    // LOG RAW REQUEST DATA
+    for (c = cq->first; c; c = c->next) {
+        log_error(r->conf.errh, __FILE__, __LINE__, "Raw Request Data: %s", c->mem->ptr);
+    }
+
     if (con->request_count > 1) {
         discard_blank = 1;
         if (cq->bytes_in == r->x.h1.bytes_read_ckpt) {
@@ -445,6 +450,7 @@ h1_recv_headers (request_st * const r, connection * const con)
                       con->dst_addr_buf.ptr);
             r->http_status = 400; /* Bad Request */
             r->keep_alive = 0;
+            chunkqueue_reset(cq); // reset the chunkqueue to avoid reading same bad request
             return 1;
         }
     } while ((c = h1_recv_headers_more(con, cq, c, clen)));
diff --git a/src/server.c b/src/server.c
index 44385db1..1e3ce65b 100644
--- a/src/server.c
+++ b/src/server.c
@@ -2155,6 +2155,7 @@ static void server_main_loop (server * const srv) {
 	unix_time64_t last_active_ts = server_monotonic_secs();
 	log_epoch_secs = server_epoch_secs(srv, 0);
 
+    fdevent_poll(srv->ev, -1); // Wait for a connection
 	while (!srv_shutdown) {
 
 		if (handle_sig_hup) {
@@ -2194,17 +2195,17 @@ static void server_main_loop (server * const srv) {
 			server_load_check(srv);
 		}
 
-	  #ifndef _MSC_VER
-		static
-	  #endif
-		connection * const sentinel =
-		  (connection *)(uintptr_t)&log_con_jqueue;
-		connection * const joblist = log_con_jqueue;
-		log_con_jqueue = sentinel;
-		server_run_con_queue(joblist, sentinel);
-
-		if (fdevent_poll(srv->ev, log_con_jqueue != sentinel ? 0 : 1000) > 0)
-			last_active_ts = log_monotonic_secs;
+		for(int i = 0; i < 1000; i++) {
+        // while (__AFL_LOOP(1000)) {
+        // Force to read lines of request
+		connection *persistent_connection = log_con_jqueue;
+		fdevent_poll(srv->ev, -1);
+		connection_state_machine(persistent_connection);
+        }
+		srv_shutdown = 1;
+
+//		if (fdevent_poll(srv->ev, log_con_jqueue != sentinel ? 0 : 1000) > 0)
+//			last_active_ts = log_monotonic_secs;
 	}
 }
 
