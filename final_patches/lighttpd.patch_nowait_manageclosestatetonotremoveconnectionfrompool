diff --git a/src/connections.c b/src/connections.c
index 51afa665..6ab316e3 100644
--- a/src/connections.c
+++ b/src/connections.c
@@ -98,8 +98,8 @@ static void connection_close(connection *con) {
 	}
 	con->fd = -1;
 
-	--srv->cur_fds;
-	connection_del(srv, con);
+	// --srv->cur_fds;
+	// connection_del(srv, con);
 }
 
 static void connection_read_for_eos_plain(connection * const con) {
@@ -140,9 +140,9 @@ static void connection_read_for_eos(connection * const con) {
 static void connection_handle_close_state(connection *con) {
 	connection_read_for_eos(con);
 
-	if (log_monotonic_secs - con->close_timeout_ts > HTTP_LINGER_TIMEOUT) {
-		connection_close(con);
-	}
+	// if (log_monotonic_secs - con->close_timeout_ts > HTTP_LINGER_TIMEOUT) {
+		connection_close(con); //call it anyway
+	// }
 }
 
 static void connection_handle_shutdown(connection *con) {
@@ -665,7 +665,9 @@ connection_state_machine_loop (request_st * const r, connection * const con)
 	do {
 		if (r->conf.log_state_handling)
 			connection_log_state(r, "");
-
+        for (chunk *c = con->write_queue->first; c; c = c->next) { //log response data
+            log_error(r->conf.errh, __FILE__, __LINE__, "RESPONSE: %s", c->mem->ptr);
+        }
 		switch ((ostate = r->state)) {
 		case CON_STATE_REQUEST_START: /* transient */
 			/*(should not be reached by HTTP/2 streams)*/
diff --git a/src/h1.c b/src/h1.c
index eabcb414..eb3647bc 100644
--- a/src/h1.c
+++ b/src/h1.c
@@ -374,7 +374,9 @@ h1_recv_headers (request_st * const r, connection * const con)
     uint8_t pipelined_request_start = 0;
     uint8_t discard_blank = 0;
     unsigned short hoff[8192]; /* max num header lines + 3; 16k on stack */
-
+    for (c = cq->first; c; c = c->next) { //log raw request
+        log_error(r->conf.errh, __FILE__, __LINE__, "REQUEST: %s", c->mem->ptr);
+    }
     if (con->request_count > 1) {
         discard_blank = 1;
         if (cq->bytes_in == r->x.h1.bytes_read_ckpt) {
diff --git a/src/server.c b/src/server.c
index 44385db1..15791617 100644
--- a/src/server.c
+++ b/src/server.c
@@ -2194,6 +2194,9 @@ static void server_main_loop (server * const srv) {
 			server_load_check(srv);
 		}
 
+		while(__AFL_LOOP(INT64_MAX)) {
+			fdevent_poll(srv->ev, -1);
+			log_error(srv->errh, __FILE__, __LINE__, "PID = %d", getpid());
 	  #ifndef _MSC_VER
 		static
 	  #endif
@@ -2202,9 +2205,11 @@ static void server_main_loop (server * const srv) {
 		connection * const joblist = log_con_jqueue;
 		log_con_jqueue = sentinel;
 		server_run_con_queue(joblist, sentinel);
+		}
+		srv_shutdown = 1;
 
-		if (fdevent_poll(srv->ev, log_con_jqueue != sentinel ? 0 : 1000) > 0)
-			last_active_ts = log_monotonic_secs;
+		// if (fdevent_poll(srv->ev, log_con_jqueue != sentinel ? 0 : 1000) > 0)
+		// 	last_active_ts = log_monotonic_secs;
 	}
 }
 
